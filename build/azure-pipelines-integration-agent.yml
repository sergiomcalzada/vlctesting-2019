trigger: none

resources:
  containers:
    - container: redis_alpine4
      image: redis:4-alpine  
    - container: redis_alpine5
      image: redis:5-alpine  
    - container: sqlserver2017
      image: mcr.microsoft.com/mssql/server:2017-latest-ubuntu  
      options: -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=Pass@word!"
    - container: sdk_30
      image: mcr.microsoft.com/dotnet/core/sdk:3.0
      voulumes:
      - $(System.DefaultWorkingDirectory)/TestResults/Coverage:/var/TestResults/Coverage
    - container: sdk_31_preview
      image: mcr.microsoft.com/dotnet/core/sdk:3.1.100-preview3  
      voulumes:
      - $(System.DefaultWorkingDirectory)/TestResults/Coverage:/var/TestResults/Coverage

strategy:
  matrix:
    sdk30_redis4_sql2017:  
      imageName: 'ubuntu-18.04'    
      displayImageName: 'sdk30_redis4_sql2017'
      sdk: 'sdk_30'
      redis: redis_alpine4
      sqlserver: sqlserver2017      
    sdk31_redis5_sql2017: 
      imageName: 'ubuntu-18.04'     
      displayImageName: 'sdk30_redis5_sql2017'
      sdk: 'sdk_31_preview'
      redis: redis_alpine5
      sqlserver: sqlserver2017    

services:
  redis: $[variables['redis']] 
  sqlserver: $[variables['sqlserver']]

pool:
  vmImage: $[variables['imageName']] 

container: $[variables['sdk']]   

variables:    
  buildConfiguration: 'Release'
  solution: '**/*.sln'    
  testProject: '**/*.WebTest.csproj'  
  buildNumer: "$[variables['Build.BuildNumber']]"
  coverageRootPath: "/var/TestResults/Coverage"
  Redis__IsEnabled: true
  Redis__Configuration: 'redis'
  ConnectionStrings__DefaultConnection: 'Server=sqlserver;Initial Catalog=Test;User ID=sa;Password=Pass@word!'

steps:
- task: DotNetCoreCLI@2
  name: 'DotNetRestore'
  displayName: 'DotNet - Restore'
  inputs:
    command: 'restore'
    projects: '$(solution)'

- task: DotNetCoreCLI@2
  name: 'DotNetBuild'
  displayName: 'DotNet - Build'
  inputs:
    command: 'build'
    projects: '$(solution)'
    

- task: DotNetCoreCLI@2
  name: 'DotNetTest'
  displayName: 'Test - Execute'
  inputs:
    command: test
    projects: '$(testProject)'
    arguments: '-c $(buildConfiguration) /p:CollectCoverage=false "/p:CoverletOutputFormat=\"json,cobertura\"" /p:CoverletOutput="$(coverageRootPath)/" /p:MergeWith="$(coverageRootPath)/coverage.json" "/p:Exclude=\"[*.Test]*,[xunit.*]*,[*]System.*\""'

- task: PublishCodeCoverageResults@1
  name: 'DotNetCoveragePublish'
  displayName: 'Test - Publish coverage report'
  inputs:
    codeCoverageTool: cobertura
    summaryFileLocation: $(coverageRootPath)/**/*.xml
    reportDirectory: $(coverageRootPath)/Reports
    failIfCoverageEmpty: false
